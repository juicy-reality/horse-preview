// Note: A string header with GLSL version and #defines is added here.

/**
 * Copyright 2015 Kai Burjack
 * See: https://github.com/LWJGL/lwjgl3/wiki/2.6.1.-Ray-tracing-with-OpenGL-Compute-Shaders-%28Part-I%29
 *
 * Copyright 2015 Michael Leahy / TyphonRT, Inc.
 * Converted to OpenGL ES 3.1 by Michael Leahy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

layout(binding = 0, rgba32f) uniform highp writeonly image2D framebuffer;

precision mediump float;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

struct box
{
   vec3 min;
   vec3 max;
};

struct hitinfo
{
   vec2 lambda;
   int bi;
};

#define MAX_SCENE_BOUNDS 1000.0
#define NUM_BOXES 2

// We would like to use an initialization list, but as of Q2 2015 only Nvidia seemingly supports this properly.

// const box boxes[NUM_BOXES] =
// {
//   /* The ground */
//   { vec3(-5.0, -0.1, -5.0), vec3(5.0, 0.0, 5.0) },
//
//   /* Box in the middle */
//   { vec3(-0.5, 0.0, -0.5), vec3(0.5, 1.0, 0.5) },
//};

// For some reason the Mali-T760 in the Galaxy S6 doesn't like the standard definition and fails.
const box boxes[2] = box[2](
   box(vec3(-5.0, -0.1, -5.0), vec3(5.0, 0.0, 5.0)),
   box(vec3(-0.5, 0.0, -0.5), vec3(0.5, 1.0, 0.5))
);

vec2 intersectBox(vec3 origin, vec3 dir, const box b)
{
   vec3 tMin = (b.min - origin) / dir;
   vec3 tMax = (b.max - origin) / dir;
   vec3 t1 = min(tMin, tMax);
   vec3 t2 = max(tMin, tMax);
   float tNear = max(max(t1.x, t1.y), t1.z);
   float tFar = min(min(t2.x, t2.y), t2.z);
   return vec2(tNear, tFar);
}

bool intersectBoxes(vec3 origin, vec3 dir, out hitinfo info)
{
   float smallest = MAX_SCENE_BOUNDS;
   bool found = false;

   for (int i = 0; i < NUM_BOXES; i++)
   {
      vec2 lambda = intersectBox(origin, dir, boxes[i]);

      if (lambda.x > 0.0 && lambda.x < lambda.y && lambda.x < smallest)
      {
         info.lambda = lambda;
         info.bi = i;
         smallest = lambda.x;
         found = true;
      }
   }

   return found;
}

vec4 trace(vec3 origin, vec3 dir)
{
   hitinfo i;

   if (intersectBoxes(origin, dir, i))
   {
      vec4 gray = vec4(float(i.bi) / 10.0 + 0.8);
      return vec4(gray.rgb, 1.0);
   }

   return vec4(0.0, 0.0, 0.0, 1.0);
}

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;
void main(void)
{
   ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
   ivec2 size = imageSize(framebuffer);

   if (pix.x >= size.x || pix.y >= size.y)
   {
      return;
   }

   vec2 pos = vec2(pix) / vec2(size.x, size.y);

   vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);

   vec4 color = trace(eye, dir);

   imageStore(framebuffer, pix, color);
}
